#!/bin/bash

## audio related functions ##

shuffle_and_play_mp3() {
  mp3=$(find "$MP3_DIR" -name \*.mp3 -print | shuf -n 1)

  mp3_process_pid=$(get_mp3_pid)

  echo "STARTING MP3"

  if [ "$mp3" ] && [ -z "$(get_mp3_pid)" ]; then
    play "$mp3" -t alsa &
  elif [ -z "$mp3" ]; then
    echo "I would play the song now if I only had some .mp3 files!"
    echo "Configure songs directory or add some .mp3 files to this directory!"
    exit 1;
  fi;
}

stop_mp3() {
  if [ "$(get_mp3_pid)" ]; then
    echo "KILLING MP3"
    kill -9 $(get_mp3_pid)
  fi
}

get_mp3_pid() {
  echo $(ps aux | grep -i "[p]lay.*-t alsa" | awk "{ print \$2}")
}

monitor_audio() {
  volume=$(rec -n stat trim 0 $SAMPLING_PERIOD 2>&1 | awk '/^Maximum amplitude/ { print $3 }')

  if [ $VERBOSE_MODE -eq 1 ]; then
    echo $volume
  fi

  if [ $BARK_LOUDNESS ] && (awk "BEGIN {exit !($volume > $BARK_LOUDNESS)}"); then
    shuffle_and_play_mp3
  fi
}


## GUI related functions ##

start_server() {
  # (nc -l -p 9000 -i 1 < ncloop | (read METHOD URI PROTOCOL ; echo $URI) > ncloop) & #does not work on my debian
  # (nc -l -p 9000 -i 1 < <(read METHOD URI PROTOCOL ; echo "path: $URI")) & # does not work at all

  # bit hackish way to pipe incoming request to handle_request method,
  # but named pipe did not work on my slow debian (fifo) and
  # process substitution did not give any results at all
  serve_static | nc -l -p 9000 -i 1 | (read METHOD URI PROTOCOL; handle_request "$URI") &
  server_process_pid=$!
  echo "starting server"
}

handle_request() {
  if [ "$1" == "/next_track" ]; then
    echo "NEXT TRACK"
    echo $mp3_process_pid
    stop_mp3
    shuffle_and_play_mp3
  fi
}

serve_static() {
  echo -ne "HTTP/1.0 200 OK\r\nContent-Length: $(wc -c <index.html)\r\n\r\n"; cat index.html;
}

monitor_server() {
  #check if server process is not present, start server
  if [ -z $server_process_pid ] || (! kill -s 0 $server_process_pid); then
    start_server
  fi
}

#load configuration
SCRIPTPATH=$(cd ${0%/*} && pwd -P)
CONFIGFILE=$SCRIPTPATH/barkstopper.config

if [ ! -f $CONFIGFILE ]; then
  echo "Configuration file (barkstopper.config) not found!"
  exit 1;
else
  source $SCRIPTPATH/barkstopper.config
fi;

#sample the mic input
while true; do
  monitor_audio
  monitor_server
done
